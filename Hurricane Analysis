# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 
'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 
'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 
'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 
'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 
2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 
180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], 
['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], 
['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], 
['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], 
['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], 
['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], 
['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], 
['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], 
['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], 
['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], 
['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], 
['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], 
['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', 
'1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', 
'15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

# test function by updating damages
def record_damages(damages):
    damages_float = []
    for amount in damages:
        if "M" in amount:
            damages_float.append(float(amount[:-1])*1000000)
        elif "B" in amount:
            damages_float.append(float(amount[:-1])*1000000000)
        else:
            damages_float.append(amount)
    return damages_float

#so I can use the data afterwards
record_damages = record_damages(damages) 
print(record_damages)

# 2 
# Create a Table
# Create and view the hurricanes dictionary
def hurricane_data(names, months, years, max_sustained_winds, areas_affected, record_damages, deaths):
    hurricanes = {names[i]: 
                      {"Name": names[i], 
                       "Month": months[i], 
                       "Year": years[i], 
                       "Max Sustained_Wind": max_sustained_winds[i], 
                       "Areas Affected": areas_affected[i], 
                       "Damage": record_damages[i],
                       "Deaths": deaths[i]} for i in range(0, len(names))}
    return hurricanes

hurricanes = hurricane_data(names, months, years, max_sustained_winds, areas_affected, record_damages, deaths)
print(hurricanes)

# 3
# Organizing by Year
# create a new dictionary of hurricanes with year and key
def hurricanes_by_year(hurricanes):
    hurricanes_year = dict() 
    for hurricane in hurricanes:
        current_year = hurricanes[hurricane]["Year"]
        current_hurricane = hurricanes[hurricane]
        if current_year not in hurricanes_year:
            hurricanes_year[current_year] = [current_hurricane]
        else:
            hurricanes_year[current_year].append(current_hurricane) 
    return hurricanes_year

hurricanes_by_year = hurricanes_by_year(hurricanes)
print(hurricanes_by_year)

# 4
# Counting Damaged Areas
# create dictionary of areas to store the number of hurricanes involved in
def affected_areas(areas_affected):
    times_areas_affected = dict()
    for area in areas_affected:
        for country in area:
            if country not in times_areas_affected:
                times_areas_affected[country] = 1
            else:
                times_areas_affected[country] += 1
    return times_areas_affected

affected_areas = affected_areas(areas_affected)
print(affected_areas)

# 5 
# Calculating Maximum Hurricane Count
# find most frequently affected area and the number of hurricanes involved in
def max_hurricane_count(affected_areas):
    max_affected_areas = max(affected_areas.items(), key=lambda k: k[1])
    return max_affected_areas

max_hurricane_count = max_hurricane_count(affected_areas)
print(max_hurricane_count)

# 6
# Calculating the Deadliest Hurricane
# find highest mortality hurricane and the number of deaths
def max_hurricane_deaths(names, deaths):
    names_deaths = dict(zip(names, deaths))
    max_hurricane_death = max(names_deaths.items(), key=lambda k: k[1])
    return max_hurricane_death

max_hurricane_deaths = max_hurricane_deaths(names, deaths)
print(max_hurricane_deaths)

# 7
# Rating Hurricanes by Mortality
# categorize hurricanes in new dictionary with mortality severity as key
def mortatily_rating(hurricanes):
    mortality_rate = {1: [], 2: [], 3: [], 4: []}
    for name, death in hurricanes.items():
        if death["Deaths"] <= 100:
            mortality_rate[1].append(name)
        elif death["Deaths"] <= 500:
            mortality_rate[2].append(name)
        elif death["Deaths"] <= 1000:
            mortality_rate[3].append(name)
        else:
            mortality_rate[4].append(name)
    return mortality_rate

mortality_rate = mortatily_rating(hurricanes)
print(mortality_rate)   

# 8 Calculating Hurricane Maximum Damage
# find highest damage inducing hurricane and its total cost
def greatest_damage(hurricanes):
    only_num_damages = [damage for damage in record_damages if damage != "Damages not recorded"]
    max_damage = max(only_num_damages)
    for hurricane in hurricanes:
        if hurricanes[hurricane]["Damage"] == max_damage:
            return hurricanes[hurricane]["Name"], max_damage

greatest_damage = greatest_damage(hurricanes)
print(greatest_damage)

# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
def damage_scale(hurricanes):
    damage_rate = {1: [], 2: [], 3: [], 4: []}
    for name, damage in hurricanes.items():
        if damage["Damage"] != "Damages not recorded":
            if damage["Damage"] <= 100000000:
                damage_rate[1].append(name)
            elif damage["Damage"] <= 1000000000:
                damage_rate[2].append(name)
            elif damage["Damage"] <= 10000000000:
                damage_rate[3].append(name)
            else:
                damage_rate[4].append(name)
        else:
            continue
    return damage_rate

damage_scale = damage_scale(hurricanes)
print(damage_scale) 
